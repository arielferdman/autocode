#!/usr/bin/env node

// load minimist
const minimist = require('minimist')(process.argv.slice(2))

// load packages
const ascii = require('../cli/lib/ascii')()
const Autocode = require(`../${minimist.debug ? 'src' : 'lib'}/autocode`)

// load modules
import _ from 'lodash'
import bluebird from 'bluebird'
import colors from 'colors' // eslint-disable-line no-unused-vars
import fs from 'fs'
import userHome from 'user-home'
import yaml from 'js-yaml'

// handle uncaught exceptions
process.on('uncaughtException', e => {
	if (minimist.debug) {
		throw e
	}
	console.log(e.message.red) // eslint-disable-line no-console
})

// get commands
const commands = yaml.safeLoad(fs.readFileSync(`${__dirname}/../cli/cmd.yml`))

// get project
const project = new Autocode()

// validate commands
for (const command in commands) {
	if (!project[command] && command !== 'help') {
		throw new Error(`Invalid command: ${command}`)
	}
}

// get command
const command = minimist._[0] || 'help'

// validate command
if (!commands[command]) {
	throw new Error(`Unknown command: ${command}`)
}

// display ascii
if (minimist.debug || command === 'help') {
	console.log(ascii.gray) // eslint-disable-line no-console
}

// get autocode output
bluebird.try(() => {
	// change cwd
	if (!_.contains(['info', 'import', 'install', 'link', 'search'], command) && minimist._[1]) {
		const dest = minimist._[1].split('@')
		const version = dest[1] || 'latest'
		const module = dest[0]

		const cwd = `${userHome}/.autocode/module/github.com/${module}/${version}`
		if (!fs.existsSync(cwd)) {
			throw new Error(`Module (${module}@${version}) does not exist at: ${cwd}`)
		}

		process.chdir(cwd)
	}

	if (_.contains(['build', 'config', 'import', 'run', 'stop', 'update'], command)) {
		project.load(process.cwd())
	}

	switch (command) {
		case 'cache': {
			project.cache(
				minimist._[1] || minimist.key,
				minimist._[2] || minimist.value,
				minimist.debug
			)
			break
		}

		case 'config': {
			project.load(process.cwd())

			console.log(yaml.safeDump(project.config).blue) // eslint-disable-line no-console
			break
		}

		case 'help': {
			const output = require(`${__dirname}/../cli/lib/help`)(commands)
			console.log(output) // eslint-disable-line no-console
			break
		}

		case 'import': {
			project.import({
				name: minimist._[1],
				force: minimist.f || minimist.force,
			})

			break
		}

		case 'install': {
			project.install({
				name: minimist._[1],
				force: minimist.f || minimist.force,
			})

			break
		}

		case 'link': {
			const config = project.config('.')
			let version = config.version
			let id = config.id

			if (minimist._[1]) {
				const dest = minimist._[1].split('@')
				version = dest[1]
				if (dest[0].length) {
					id = dest[0]
				}
			}

			const collection = id.slice(0, id.lastIndexOf('.'))
			const module = id.slice(id.lastIndexOf('.') + 1)

			let src = process.cwd()
			if (minimist._[2]) {
				src = minimist._[2]
			}

			let force = false
			if (minimist.f === true || minimist.force === true) {
				force = true
			}

			project.build(minimist)

			project.link({
				collection,
				force,
				module,
				src,
				version,
			})

			break
		}

		case 'signup': {
			project.signup()
			break
		}

		default: {
			if (minimist.f === true) {
				minimist.force = true
			}
			if (minimist['skip-scripts'] === true) {
				minimist.skipScripts = true
			}
			project[command](minimist)
			break
		}
	}
})

.catch(e => {
	if (minimist.debug) {
		throw e
	}
	console.log(e.message.red) // eslint-disable-line no-console
})
