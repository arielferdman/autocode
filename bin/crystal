#!/usr/bin/env node

// load coffeescript
require('coffee-script').register();

// load packages
var ascii = require('../src/cli/ascii')(),
	colors = require('colors'),
	crystal = require('../src/crystal'),
	fs = require('fs'),
	minimist = require('minimist')(process.argv.slice(2)),
	userHome = require('user-home'),
	yaml = require('js-yaml');

// get commands
var commands = yaml.safeLoad(fs.readFileSync(__dirname + '/../src/cli/cmd.yml'));

// get project
var project = new crystal();

// validate commands
for (var command in commands) {
	if (!project[command] && command != 'help') {
		throw new Error('Invalid command: ' + command);
	}
}

// get command
var command = minimist._[0] || 'help';

// validate command
if (!commands[command]) {
	throw new Error('Unknown command: ' + command);
}

// display ascii
if (minimist.debug || command == 'help') {
	console.log(ascii.gray);
}

// get crystal output
try {
	// change cwd
	if (command != 'install' && command != 'link' && minimist._[1]) {
		var dest = minimist._[1].split('@');
		var version = dest[1] || 'latest';
		dest = dest[0].split('.');
		var collection = dest[0];
		var module = dest[1];
		
		var cwd = userHome + '/.crystal/module/' + collection + '/' + module + '/' + version;
		if (!fs.existsSync(cwd)) {
			throw new Error('Module (' + collection + '.' + module + '@' + version + ') does not exist at: ' + cwd);
		}
		
		process.chdir(cwd);
	}
	
	switch (command) {
		case 'cache':
			project.cache(
				minimist._[1] || minimist.key,
				minimist._[2] || minimist.value,
				minimist.debug ? true : false
			);
			break;
			
		case 'help':
			var output = require(__dirname + '/../src/cli/help')(commands);
			console.log(output);
			break;
		
		case 'install':
			project.install({
				name: minimist._[1]
			});
		
			break;
		
		case 'link':
			var config = project.config('.');
			var version = config.version;
			var id = config.id.split('.');
			
			if (minimist._[1]) {
				var dest = minimist._[1].split('@');
				version = dest[1];
				if (dest[0].length) {
					id = dest[0].split('.');
				}
			}
			
			var collection = id[0];
			var module = id[1];
			
			if (minimist._[2]) {
				var src = minimist._[2];
			} else {
				var src = process.cwd();
			}
			
			var force = minimist.f === true || minimist.force === true ? true : false;
			
			project.link({
				collection: collection,
				force: force,
				module: module,
				src: src,
				version: version
			});
			
			break;
			
		case 'signup':
			project.signup();
			break;
		default:
			if (minimist.f === true) {
				project.force = true;
			}
			project[command](minimist);
			break;
	}
	
} catch(e) {
	if (minimist.debug) {
		throw e;
	}
	
	console.log(e.message.red);
}
