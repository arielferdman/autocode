// Generated by CoffeeScript 1.9.3
(function() {
  var crystal, fs, install, mkdirp, path, request, semver, untar, userHome, zlib;

  crystal = require('../crystal');

  fs = require('fs');

  mkdirp = require('mkdirp');

  path = require('path');

  request = require('sync-request');

  semver = require('semver');

  untar = require('untar.js');

  userHome = require('user-home');

  zlib = require('zlib');

  install = function(opts) {
    var access_token_url, config_resp, config_url, headers, host, j, len, module_name, module_parse, module_path, module_version, project, release, release_resp, release_url, release_version, releases, tag_name, tarball, tarball_response, tarball_url;
    host = 'github.com';
    if (typeof opts === 'object' && opts.name) {
      module_name = opts.name;
    }
    if (typeof opts === 'object' && opts.version) {
      module_version = opts.version;
    } else if (module_name.match('@')) {
      module_parse = module_name.split('@');
      module_name = module_parse[0];
      module_version = module_parse[1];
    } else {
      module_version = 'latest';
    }
    if (!module_name) {
      throw new Error("Module Name is required for `crystal install`.");
    }
    console.log(("Loading module (" + module_name + ")...").blue);
    headers = {
      'User-Agent': 'Crystal <support@crystal.sh> (https://crystal.sh)'
    };
    access_token_url = '';
    if (process.env.GITHUB_ACCESS_TOKEN) {
      access_token_url += "?access_token=" + process.env.GITHUB_ACCESS_TOKEN;
    }
    if (module_version === 'latest') {
      release_url = "https://api.github.com/repos/" + module_name + "/releases/latest" + access_token_url;
      release_resp = request('get', release_url, {
        headers: headers
      });
      if (release_resp.statusCode !== 200) {
        throw new Error("Module (" + module_name + ") does not exist in the Crystal Hub.");
      }
      release = JSON.parse(release_resp.body);
      if (!release) {
        throw new Error("Unable to locate generator (" + name + ").");
      }
      tag_name = release.tag_name;
      console.log(("Latest version is " + release.tag_name + ".").green);
    } else {
      release_url = "https://api.github.com/repos/" + module_name + "/releases" + access_token_url;
      release_resp = request('get', release_url, {
        headers: headers
      });
      if (release_resp.statusCode !== 200) {
        throw new Error("Module (" + module_name + ") does not exist in the Crystal Hub.");
      }
      releases = JSON.parse(release_resp.body);
      if (!releases) {
        throw new Error("Unable to locate generator (" + name + ").");
      }
      for (j = 0, len = releases.length; j < len; j++) {
        release = releases[j];
        release_version = semver.clean(release.tag_name);
        if (semver.satisfies(release_version, module_version)) {
          module_version = semver.clean(release.tag_name);
          tag_name = release.tag_name;
          break;
        }
      }
      if (!tag_name) {
        throw new Error("Unable to find version (" + module_version + ") for module (" + module_name + ").");
      }
      console.log(("Found version (" + module_version + ") with tag (" + tag_name + ").").green);
    }
    if (opts.force !== true) {
      config_url = "https://api.github.com/repos/" + module_name + "/contents/.crystal/config.yml?ref=" + tag_name;
      config_resp = request('get', config_url, {
        headers: headers
      });
      if (config_resp.statusCode !== 200) {
        throw new Error("Module (" + module_name + ") has not implemented Crystal. Use -f to install anyways.");
      }
    }
    tarball_url = "" + release.tarball_url + access_token_url;
    console.log(("Downloading from: " + tarball_url).bold);
    tarball_response = request('get', tarball_url, {
      headers: headers
    });
    if (tarball_response.statusCode !== 200) {
      throw new Error("Unable to download module (" + module_name + ").");
    }
    tarball = zlib.gunzipSync(tarball_response.body);
    if (!tarball) {
      throw new Error("Unable to unzip module (" + module_name + ").");
    }
    module_path = path.normalize(userHome + "/.crystal/module/" + host + "/" + module_name + "/" + module_version);
    untar.untar(tarball).forEach(function(file) {
      var buffer, file_path, filename, i;
      filename = file.filename.split('/').slice(1).join('/');
      file_path = path.dirname(filename);
      mkdirp.sync(module_path + "/" + file_path);
      buffer = new Buffer(file.fileData.length);
      i = 0;
      while (i < file.fileData.length) {
        buffer.writeUInt8(file.fileData[i], i);
        i++;
      }
      return fs.writeFileSync(module_path + "/" + filename, buffer);
    });
    project = new crystal(module_path);
    project.update();
    project.build();
    return console.log(("Successfully installed " + module_name + " at: " + module_path).green);
  };

  module.exports = install;

}).call(this);
