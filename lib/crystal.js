// Generated by CoffeeScript 1.9.3
(function() {
  var crystal;

  process.env['NODE_TLS_REJECT_UNAUTHORIZED'] = '0';

  global.ErrorInvalid = function(name, type) {
    this.name = 'ErrorInvalid';
    return this.message = "'" + name + "' is invalid.";
  };

  global.ErrorInvalid.prototype = Error.prototype;

  global.ErrorType = function(name, type) {
    this.name = 'ErrorType';
    return this.message = "'" + name + "' must be of type (" + type + ").";
  };

  global.ErrorType.prototype = Error.prototype;

  global.ErrorRequired = function(name) {
    this.name = 'ErrorRequired';
    return this.message = "'" + name + "' is required.";
  };

  global.ErrorRequired.prototype = Error.prototype;

  crystal = function(path) {
    var config, i, len, method, methods;
    this.project = {};
    methods = ['build', 'cache', 'clean', 'config', 'data', 'default', 'format', 'generate', 'info', 'init', 'install', 'link', 'publish', 'process', 'run', 'search', 'signup', 'spec', 'stop', 'test', 'update', 'url', 'validate', 'version'];
    for (i = 0, len = methods.length; i < len; i++) {
      method = methods[i];
      this[method] = require("./crystal/" + method);
    }
    if (typeof path === 'string') {
      this.path = path;
      config = this.config(path);
    } else if (typeof path === 'object') {
      config = this.validate(path);
    }
    if (config === false) {
      throw new Error("Unable to load config for (" + path + ").");
    }
    if (config !== void 0) {
      this.config = config;
    }
    this.opts = {};
    return this;
  };

  module.exports = crystal;

}).call(this);
